#!/usr/bin/env ruby
require "optparse"
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require "parallel_split_test"

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
Split a big test file into multiple chunks and run them in parallel, giving ENV['TEST_ENV_NUMBER'] ('', '2', '3', ...)

Usage:
    parallel_split_test test/baz/xxx_text.rb

Options are:
BANNER
  opts.on("-v", "--version", "Show Version"){ require 'parallel_split_test/version'; puts ParallelSplitTest::VERSION; exit}
  opts.on("-h", "--help", "Show this.") { puts opts; exit }
end

parser.parse!

if ARGV.empty?
  puts parser
  exit
end

require "rspec"
require "parallel"

# a cleaned up version of the RSpec runner, e.g. no drb support
class ParallelSplitTest::Runner < RSpec::Core::Runner
  def self.run(args, err=$stderr, out=$stdout)
    trap_interrupt
    options = RSpec::Core::ConfigurationOptions.new(args)
    options.parse_options
    ParallelSplitTest::CommandLine.new(options).run(err, out)
  ensure
    RSpec.reset
  end
end

class ParallelSplitTest::CommandLine < RSpec::Core::CommandLine
  def run(err, out)
    setup_copied_from_rspec(err, out)

    processes = 2
    example_count = @world.example_count / processes
    seed = (@configuration.randomize? ? @configuration.seed : nil)

    Parallel.in_processes(processes) do |process_number|
      ENV['TEST_ENV_NUMBER'] = (process_number == 0 ? '' : (process_number + 1).to_s)

      @configuration.reporter.report(example_count, seed) do |reporter|
        begin
          @configuration.run_hook(:before, :suite)
          groups = groups_for_this_process(@world.example_groups.ordered, process_number, processes)
          puts "PROCESS #{process_number} -- #{groups.size}"

          groups.map {|g| g.run(reporter)}.all? ? 0 : @configuration.failure_exit_code
        ensure
          @configuration.run_hook(:after, :suite)
        end
      end
    end
  end

  private

  def groups_for_this_process(groups, number, count)
    selected = []
    groups.each_with_index do |group, i|
      selected << group if i % count == number
    end
    selected
  end

  def setup_copied_from_rspec(err, out)
    @configuration.error_stream = err
    @configuration.output_stream ||= out
    @options.configure(@configuration)
    @configuration.load_spec_files
    @world.announce_filters
  end
end

ParallelSplitTest::Runner.run(ARGV)